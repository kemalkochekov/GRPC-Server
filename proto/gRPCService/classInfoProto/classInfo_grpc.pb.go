// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: classInfo.proto

package classInfoProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClassInfoService_AddClass_FullMethodName               = "/ClassInfoService/AddClass"
	ClassInfoService_UpdateClass_FullMethodName            = "/ClassInfoService/UpdateClass"
	ClassInfoService_DeleteClassByStudent_FullMethodName   = "/ClassInfoService/DeleteClassByStudent"
	ClassInfoService_GetAllClassesByStudent_FullMethodName = "/ClassInfoService/GetAllClassesByStudent"
)

// ClassInfoServiceClient is the client API for ClassInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassInfoServiceClient interface {
	// Create ClassInfo
	AddClass(ctx context.Context, in *ClassAddRequest, opts ...grpc.CallOption) (*ClassAddResponse, error)
	// Update ClassInfo
	UpdateClass(ctx context.Context, in *ClassUpdateRequest, opts ...grpc.CallOption) (*ClassUpdateResponse, error)
	// Delete ClassInfo By Student
	DeleteClassByStudent(ctx context.Context, in *ClassDeleteRequest, opts ...grpc.CallOption) (*ClassDeleteResponse, error)
	// Get All ClassesByStudent
	GetAllClassesByStudent(ctx context.Context, in *ClassesGetRequest, opts ...grpc.CallOption) (*ClassesGetResponse, error)
}

type classInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassInfoServiceClient(cc grpc.ClientConnInterface) ClassInfoServiceClient {
	return &classInfoServiceClient{cc}
}

func (c *classInfoServiceClient) AddClass(ctx context.Context, in *ClassAddRequest, opts ...grpc.CallOption) (*ClassAddResponse, error) {
	out := new(ClassAddResponse)
	err := c.cc.Invoke(ctx, ClassInfoService_AddClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classInfoServiceClient) UpdateClass(ctx context.Context, in *ClassUpdateRequest, opts ...grpc.CallOption) (*ClassUpdateResponse, error) {
	out := new(ClassUpdateResponse)
	err := c.cc.Invoke(ctx, ClassInfoService_UpdateClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classInfoServiceClient) DeleteClassByStudent(ctx context.Context, in *ClassDeleteRequest, opts ...grpc.CallOption) (*ClassDeleteResponse, error) {
	out := new(ClassDeleteResponse)
	err := c.cc.Invoke(ctx, ClassInfoService_DeleteClassByStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classInfoServiceClient) GetAllClassesByStudent(ctx context.Context, in *ClassesGetRequest, opts ...grpc.CallOption) (*ClassesGetResponse, error) {
	out := new(ClassesGetResponse)
	err := c.cc.Invoke(ctx, ClassInfoService_GetAllClassesByStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassInfoServiceServer is the server API for ClassInfoService service.
// All implementations must embed UnimplementedClassInfoServiceServer
// for forward compatibility
type ClassInfoServiceServer interface {
	// Create ClassInfo
	AddClass(context.Context, *ClassAddRequest) (*ClassAddResponse, error)
	// Update ClassInfo
	UpdateClass(context.Context, *ClassUpdateRequest) (*ClassUpdateResponse, error)
	// Delete ClassInfo By Student
	DeleteClassByStudent(context.Context, *ClassDeleteRequest) (*ClassDeleteResponse, error)
	// Get All ClassesByStudent
	GetAllClassesByStudent(context.Context, *ClassesGetRequest) (*ClassesGetResponse, error)
	mustEmbedUnimplementedClassInfoServiceServer()
}

// UnimplementedClassInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassInfoServiceServer struct {
}

func (UnimplementedClassInfoServiceServer) AddClass(context.Context, *ClassAddRequest) (*ClassAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClass not implemented")
}
func (UnimplementedClassInfoServiceServer) UpdateClass(context.Context, *ClassUpdateRequest) (*ClassUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedClassInfoServiceServer) DeleteClassByStudent(context.Context, *ClassDeleteRequest) (*ClassDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassByStudent not implemented")
}
func (UnimplementedClassInfoServiceServer) GetAllClassesByStudent(context.Context, *ClassesGetRequest) (*ClassesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClassesByStudent not implemented")
}
func (UnimplementedClassInfoServiceServer) mustEmbedUnimplementedClassInfoServiceServer() {}

// UnsafeClassInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassInfoServiceServer will
// result in compilation errors.
type UnsafeClassInfoServiceServer interface {
	mustEmbedUnimplementedClassInfoServiceServer()
}

func RegisterClassInfoServiceServer(s grpc.ServiceRegistrar, srv ClassInfoServiceServer) {
	s.RegisterService(&ClassInfoService_ServiceDesc, srv)
}

func _ClassInfoService_AddClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInfoServiceServer).AddClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInfoService_AddClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInfoServiceServer).AddClass(ctx, req.(*ClassAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassInfoService_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInfoServiceServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInfoService_UpdateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInfoServiceServer).UpdateClass(ctx, req.(*ClassUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassInfoService_DeleteClassByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInfoServiceServer).DeleteClassByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInfoService_DeleteClassByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInfoServiceServer).DeleteClassByStudent(ctx, req.(*ClassDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassInfoService_GetAllClassesByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassInfoServiceServer).GetAllClassesByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassInfoService_GetAllClassesByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassInfoServiceServer).GetAllClassesByStudent(ctx, req.(*ClassesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassInfoService_ServiceDesc is the grpc.ServiceDesc for ClassInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClassInfoService",
	HandlerType: (*ClassInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClass",
			Handler:    _ClassInfoService_AddClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _ClassInfoService_UpdateClass_Handler,
		},
		{
			MethodName: "DeleteClassByStudent",
			Handler:    _ClassInfoService_DeleteClassByStudent_Handler,
		},
		{
			MethodName: "GetAllClassesByStudent",
			Handler:    _ClassInfoService_GetAllClassesByStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classInfo.proto",
}
